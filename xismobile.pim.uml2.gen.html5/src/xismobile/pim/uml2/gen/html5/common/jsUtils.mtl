[comment encoding = UTF-8 /]
[module jsUtils('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::html5::common::utils /]
[import xismobile::pim::uml2::gen::html5::common::xisWebUtils /]

[template public generateJSUtils(m : Model)]
[file ('src/js/jsUtils.js', false, 'UTF-8')]
[comment This file will have 2 areas: General DB JS Instrumentation and Specific site JS functions /]
[comment This code is for testing purposes, this class is not intended to do ocl logic /]
var [m.name.toLower()/] = {}
[m.name.toLower()/].db = {}

//Holding database instance inside a global variable
[m.name.toLower()/].open = function(){
[m.name.toLower()/].db = openDatabase("[m.name/]", "1.0", "[name.toUpperFirst()/] DB", 5 * 1024 * 1024);	
}

[comment Scripts that are mandatory for logic but are connected to entities /]
[for (c : Class | m.getAllXisEntities())]
[createTable(c)/]
[insertEntityIntoTable(c)/]
[selectAllFromTable(c)/]
[dropTable(c)/]
[deleteItemFromTable(c)/]
[/for]

//Function to be called when database queries fail
[m.name.toLower()/].onError = function(tx, e) {
  alert("There has been an error: " + e.message);
}

//Function to be called when database queries succeeed.
[m.name.toLower()/].onSuccess = function(tx, r) {
  // empty. Should be used only for debug purposes
  // alert("Query worked);
}

//Function that reads the query string. Should be used like: var param = $.QueryString['['/]"param"[']'/]; returns the param value;
$.QueryString = (function(query) {
    if (query == "") return {};
    var parameter = {};
    for (var i = 0; i < query.length; ++i)
    {
        var value=query['['/]i[']'/].split('=');
        if (value.length != 2) continue;
        parameter['['/]value['['/]0[']'/][']'/] = decodeURIComponent(value['['/]1[']'/].replace(/\+/g, " "));
    }
    return parameter;
})(window.location.search.substr(1).split('&'));

[/file]
[/template]

[comment CODE PART FOR IS SPECIFIC FUNCTIONS/]
[comment] Assumptions:
	There is an Ordered List (ol) in the page that contains the Master Items
	There is a Delete All Button (should make some ocl verifications)
[/comment]
[template public loadListItemsForIS(c : Class)]
//Iterate through the set and call the function that knows how to print the Item on each element
function loadListItemsFor[c.getXisInteractionSpace().name.toUpperFirst()/](tx, rs) {
  var items = document.getElementById("[c.getXisInteractionSpace().name.toLower()/]_ol_[c.name.toLower()/]");
  for (var i=0; i < rs.rows.length; i++) {
    renderItem(rs.rows.item(i), items);
  }
}
[/template]

[template public hideDeleteAllButtonsForIS(c: Class)]
//If there are no Items hide the DeleteAll button
function hideDeleteAllButtonFor[c.getXisInteractionSpace().name.toUpperFirst()/](tx, rs) {
	if(rs.rows.length == 0){
		$('#[c.getXisInteractionSpace().name.toLower()/]_btn_deleteall').hide();
	}
}
[/template]

[template public fillContentForIS(c : Class)]
[let entityAttributes : Set(Property) = c.getXisEntityAttributes()]
//When page is in edit mode, fill contents, else hide Delete button
function fillContentFor[c.getXisInteractionSpace().name.toUpperFirst()/]() {
	var id = $.QueryString['['/]"id"[']'/];
	[for(p : Property | entityAttributes)]
	var [p.name/] = $.QueryString['['/]"[p.name/]"[']'/]
	[/for]
	
	if(id > 0 && [for (p : Property | entityAttributes) separator ('&&')][p.name/]!== 'undefined'[/for]{
		[for (p: Property | entityAttributes)]
		$('#[p.name/]').val([p.name/]);
		[/for]
	}else
	{
		$('#[c.getXisInteractionSpace().name.toLower()/]_[c.name.toLower()/]_btn_delete').hide();
	}
}
[/let]
[/template]

[template public renderItemForIS(c : Class)]
[comment TODO: Define a pattern to apply here that must always be the same /]
//Find the ol, each Item is an <li> surrounded by an <a> with a <span> with the id inside
function renderItem(row, ol) {
	var a = document.createElement('a');
	var li = document.createElement('li');
	var span = document.createElement('span');
	
	ol.appendChild(a);
	a.appendChild(li);
	li.appendChild(span);
	
	a.setAttribute('href', "[c.getXisInteractionSpace().name.toLower()/].html?"&id=" + row.id +[for(p : Property | c.getXisEntityAttributes()) separator('+')]"&[p.name/]=" + row.[p.name/][/for]);
	a.setAttribute('class', 'list-group-item')
	li.setAttribute('class','list-group-item');
	span.setAttribute('class', 'badge')
	span.innerHTML = span.innerHTML + row.id;
    li.innerHTML=li.innerHTML + [for(p : Property | c.getXisEntityAttributes()) separator('+ ": " +')]row.[p.name/][/for];
}
[/template]

[comment END OF IS SPECIFIC PART /]
[comment BEGINING OF DB INSTRUMENTATION PART /]

[template public createDatabase(m : Model)]
[m.name.toLower()/].open();
[/template]

[template public createTable(c : Class)]
//Will create a table if it doesn't exist already
[c.getModel().name.toLower()/].createTable[c.name.toUpperFirst()/] = function(){
	var database = [c.getModel().name.toLower()/].db;	
	database.transaction(function (tx) {
		tx.executeSql("CREATE TABLE IF NOT EXISTS [c.name.toLower()/] (id INTEGER PRIMARY KEY AUTOINCREMENT, [c.getXisEntityAttributes().name.toLower()->sep(', ')/]),[ '[' /][']'/]");
	});
}
[/template]

[template public initTable(c : Class)]
[c.getModel().name.toLower() /].createTable[c.name.toUpperFirst()/]();
[/template]

[template public insertEntityIntoTable(c : Class)]
//Inserts or Updates (if exists) the Todo in the db. Passing values as parameters
[comment Must see if this is correct, the arguments /]
[c.getModel().name.toLower()/].addItemTo[c.name.toUpperFirst()/] = function(){
	var database = [c.getModel().name.toLower()/].db;
	var id = $.QueryString[ '[' /]"id"[']'/];
	
	if(id > 0){
		database.transaction(function(tx){
			tx.executeSql("UPDATE [c.name.toLower()/] SET [c.getXisEntityAttributes().name.toLower()->sep('= ?, ')/] = ? WHERE id = ?",
			['['/][c.getXisEntityAttributes().name->sep(', ')/][']'/],
			[c.getModel().name.toLower()/].onSuccess,
			[c.getModel().name.toLower()/].onError);
		});
	}else
	{
		database.transaction(function(tx){
			tx.executeSql("INSERT INTO [c.name.toLower()/]([c.getXisEntityAttributes().name.toLower()->sep('= ?, ')/]) VALUES ([for (p : Property | c.getXisEntityAttributes()) separator (',')]?[/for])",
			['['/][c.getXisEntityAttributes().name.toLower()->sep(', ')/][']'/],
			[c.getModel().name.toLower()/].onSuccess,
			[c.getModel().name.toLower()/].onError);
		});
	}
	
}
[/template]

[template public dropTable(c : Class)]
[c.getModel().name.toLower()/].dropTable[c.name.toUpperFirst()/] = function() {
	if(confirm('Confirm Deletion?')){	
		var database = [c.getModel().name.toLower()/].db;
		database.transaction(function (tx) {
		  tx.executeSql("DROP TABLE [c.name.toLower()/]", [ '[' /][']'/]);
		});
		
		location.reload();
	}else{
		//Do nothing!
	}
}
[/template]


[template public deleteItemFromTable(c : Class)]
//Delete Entry from database given the id
[c.getModel().name.toLower()/].deleteItemFrom[c.name.toUpperFirst()/] = function(id) {
  	var database = [c.getModel().name.toLower()/].db;
  	database.transaction(function(tx){
   	 tx.executeSql("DELETE FROM [c.name.toLower()/] WHERE ID=?", [ '[' /]id[']'/],
   	 [c.getModel().name.toLower()/].onSuccess,
   	 [c.getModel().name.toLower()/].onError);
	});
}
[/template]

[template public selectAllFromTable(c : Class)]
[c.getModel().name.toLower()/].getAllItemsFrom[c.name.toUpperFirst()/] = function(renderFunc) {
	var database = [c.getModel().name.toLower()/].db;
	database.transaction(function (tx) {
		tx.executeSql("SELECT * FROM [c.name.toLower()/]", [ '[' /][']'/], renderFunc, [c.getModel().name.toLower()/].onError);
	});
}
[/template]

[comment End of Generic DB JS Instrumentation /]